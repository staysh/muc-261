{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-efe0497e-4883-49a1-a8da-2646c2260fcf.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"2823c7","input":"# the hash is used to denote a comment in python\n\n# any characters to the right of a hash do not get interpreted\n\n# the up and down arrows move between cells\n\n# there are two modes in a notebook control (blue) to navigate and add/remove cells\n\n# and edit (green) lets you edit the content of the cell\n\n# the escape key puts you in control more, and enter into edit mode\n\n# First make sure this cell is highlighted, enter edit mode if you are\n\n# print(\"The Cell Has Run!\")\n\n# \"uncomment\" the line above, and type \"ctrl+enter\" to run the cell","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"814e5f","input":"# While in control mode 'b' adds a cell below the highlighted cell\n\n# and 'a' adds a cell above the highlighted cell\n\n# verify you are in control mode pressing esc if necessary\n\n# add a cell above and below the current cell\n\n# use the arrow keys to highlight an empty cell and type 'dd'\n\n# delete both the cells you created\n\n# Try this: add 1-5 hashes to every hash ie \"###\" and type 'm'\n\n# which changes the cell to render \"markdown\" like the title","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"6cf8b0","input":"# Since python is dynamically typed\n# we can initialize variables like this\n\nnumber = 234782349     # creates an integer\nname = 'Jane Dope'     # creates a string\npercentage = 99.99999  # creates a float\n\n# we can use a handy built in function to verify\n\nprint(type(number))\nprint(type(name))\nprint(type(percentage))\n\n# edit this cell and create new variables and check their type","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'int'>\n<class 'str'>\n<class 'float'>\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"d9436d","input":"# once you initialize a variable and run a cell\n# the values are accessible in the cells below\n\n# one more data type on our tour\n# the dictionary... a key/value data type\n\n# lets loop through our list and make a fav dictionary\n# well get the keys from our list of strings (keys are strings)\n# and well generate some random 'scores' with a helper function\n\nimport random # this is a 'module' they contain functions and objects\n\nfav_ranks = {} # starts an empty dictionary\n\nfor fav in favs:\n    fav_ranks[fav] = random.randint(1,10) # see the difference?\n\nprint(fav_ranks)\nprint(fav_ranks['olives'])\nprint(type(fav_ranks['olives']))","output":{"0":{"name":"stdout","output_type":"stream","text":"{'this': 6, 'that': 7, 'olives': 5}\n5\n<class 'int'>\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"48f092","input":"# Importing data in a pandas \"dataframe\"\n\nimport pandas as pd # we can make an alias for a library that is shorter\n\ndata = pd.read_csv('aaup.dat.txt', sep=',', header=None)\n\n\ndata.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1161 entries, 0 to 1160\nData columns (total 17 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   0       1161 non-null   int64 \n 1   1       1161 non-null   object\n 2   2       1161 non-null   object\n 3   3       1161 non-null   object\n 4   4       1161 non-null   object\n 5   5       1161 non-null   object\n 6   6       1161 non-null   object\n 7   7       1161 non-null   int64 \n 8   8       1161 non-null   object\n 9   9       1161 non-null   object\n 10  10      1161 non-null   object\n 11  11      1161 non-null   int64 \n 12  12      1161 non-null   int64 \n 13  13      1161 non-null   int64 \n 14  14      1161 non-null   int64 \n 15  15      1161 non-null   int64 \n 16  16      1161 non-null   int64 \ndtypes: int64(8), object(9)\nmemory usage: 154.3+ KB\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8e8ade","input":"# There are other classes of variables too\n\nfavs = []     # creates an empty \"list\"\n\nnew_favs = ['this', 'that', 'olives']     # creates a list with these elements\n\nfor item in new_favs:     # for loops are very succinct in python\n    favs.append(item)\n\nprint(favs)\n\n# below this line create a short list of strings\n# then write a loop to append them to favs and print the new list","output":{"0":{"name":"stdout","output_type":"stream","text":"['this', 'that', 'olives']\n"}},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"60cc7a","input":"# A Very Brief Intro To Python, Jupyter and Pandas\n\nIn this note book we will:\n\n- Learn to navigate a Jupyter Notebook from hotkeys\n- Get a very quick intro to Python in context of the course\n- Import a small data set\n- Plot some data\n\n...*Hopefully*","pos":0,"type":"cell"}
{"id":0,"time":1632809010577,"type":"user"}
{"last_load":1632808923480,"type":"file"}